/**
 * Created by Administrator on 2017/4/19.
 */
import javafx.scene.control.ComboBox;

import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.io.*;

public class Canvas extends JFrame {
    //Main function segment.
    public static void main(String[] args) {

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {

        }//Set the interface to the current windows style.

        Canvas newPad = new Canvas();
        newPad.addWindowListener(
                new WindowAdapter() {

                    public void windowClosing(WindowEvent e) {
                        System.exit(0);
                    }
                });
    }

    private ObjectInputStream input;
    private ObjectOutputStream output;
    private JButton choices[];
    private String names[] = {
            "New",
            "Open",
            "Save",//These three are the basic operation buttons

            "Pencil",
            "Line",
            "Rect",
            "fRect",//Draw a solid rectangle filled with the specified color
            "Oval",
            "fOval",
            "Circle",
            "fCircle",
            "RoundRect",
            "frRect",
            "Rubber",
            "Color",//Select color button that can be used to select the desired color
            "Horizon",//Set the style of gradient color as follows
            "Vertical",
            "Incline",
            "Stroke",//The button for selecting the thickness of the line,enter the required value can  achieve drawing line thickness changes
            "Word"//Button for entering words that can achieve drawing string on the canvas
    };

    private String styleNames[];//Optional font items

    private ImageIcon items[];
    private String tipText[] = {
            //Here are the tips when mouse moved to the corresponding buttons

            "Draw a new picture",
            "Open a saved picture",
            "Save current drawing",
            "Draw at will",
            "Draw a straight line",
            "Draw a rectangle",
            "Fill a ractangle",
            "Draw an oval",
            "Fill an oval",
            "Draw a circle",
            "Fill a circle",
            "Draw a round rectangle",
            "Fill a round rectangle",
            "Erase at will",
            "Choose current drawing color",
            "Horizon gradient",
            "Vertical gradient",
            "Incline gradient",
            "Set current drawing stroke",
            "Write down what u want"
    };
    JToolBar buttonPanel;
    private JLabel statusBar;                      //Prompt column for mouse position
    private DrawPanel drawingArea;
    private int width = 800,height=500;            //Initial size of drawing area
    Drawing[] itemList = new Drawing[5000];        //Array for saving basic graphics
    //int variable=0;                                //When pencil or rubber is used, create a new Drawing Array with more capacity(variable)
    int start=0;                            //Help to decide when to extend Array
    //java.util.ArrayList<Drawing> itemList = new java.util.ArrayList<Drawing>();
    private int currentChoice = 4;                //The default painting status is Pencil
    int index = 0;                                //The number of graphics that has been drawn
    private Color color = Color.BLACK;            //Current painting color
    int gradient=0;                               //Use gradient color
    int R,G,B;                                    //Current value of color
    int R0,G0,B0;                                 //Second gradient color
    float gradientDistance;                       //To Control the distance of gradient color
    int f1,f2;                                    //Current style of font
    String style1;                                //Current font
    private float stroke = 1.0f;
    JCheckBox bold,italics;
    JComboBox styles;
    String st;

    public Canvas(){
        super("LXYCanvas");
        GraphicsEnvironment ei = GraphicsEnvironment.getLocalGraphicsEnvironment();
        styleNames= ei.getAvailableFontFamilyNames();

        JMenuBar bar=new JMenuBar();
        JMenu fileMenu=new JMenu("File");
        fileMenu.setMnemonic('F');

        // Menu item for new file
        JMenuItem newItem=new JMenuItem("New");
        newItem.setMnemonic('N');
        newItem.addActionListener(
                new ActionListener() {
                    public void actionPerformed(ActionEvent e){
                        newFile();		//If triggered, the new file function section is called
                    }
                });
        fileMenu.add(newItem);

        //Menu item for saving file
        JMenuItem saveItem = new JMenuItem("Save");
        saveItem.setMnemonic('S');
        saveItem.addActionListener(
                new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        saveFile();     //If triggered, the saving file function section is called
                    }
                });
        fileMenu.add(saveItem);

        //Menu item for opening file
        JMenuItem loadItem = new JMenuItem("Load");
        loadItem.setMnemonic('L');
        loadItem.addActionListener(
                new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        loadFile();     //If triggered, the loading file function section is called
                    }
                });
        fileMenu.add(loadItem);
        fileMenu.addSeparator();

        //Exit menu item
        JMenuItem exitItem = new JMenuItem("Exit");
        exitItem.setMnemonic('X');
        exitItem.addActionListener(
                new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        System.exit(0); //If triggered, exit program
                    }
                });
        fileMenu.add(exitItem);
        bar.add(fileMenu);

        JMenu editMenu=new JMenu("Edit");
        editMenu.setMnemonic('E');
        JMenuItem undoItem =new JMenuItem("Undo");
        undoItem.addActionListener(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        unDo(itemList);

                    }
                }
        );
        editMenu.add(undoItem);

        JMenuItem redoItem =new JMenuItem("Redo");
        redoItem.addActionListener(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        reDo(itemList);
                    }
                }
        );
        editMenu.add(redoItem);
        bar.add(editMenu);
        //Color Menu
        JMenu colorMenu=new JMenu("Color");
        colorMenu.setMnemonic('C');

        //Choose color item
        JMenuItem colorItem=new JMenuItem("Choose Color");
        colorItem.setMnemonic('O');
        colorItem.addActionListener(
                new ActionListener(){
                    public void actionPerformed(ActionEvent e){
                        //gradient=0;
                        chooseColor();
                    }
                });
        JMenuItem gradientItem=new JMenuItem("Use Gradient Color");
        gradientItem.setMnemonic('U');
        gradientItem.addActionListener(
                new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        //gradient=true;
                        chooseGradientColor();
                    }
                }
        );
        colorMenu.add(colorItem);
        colorMenu.add(gradientItem);
        bar.add(colorMenu);

        //Stroke menu
        JMenu strokeMenu = new JMenu("Stroke");
        strokeMenu.setMnemonic('K');

        //Set stroke menu item
        JMenuItem strokeItem=new JMenuItem("Set Stroke");
        strokeItem.setMnemonic('J');
        strokeItem.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                setStroke();
            }
        });
        strokeMenu.add(strokeItem);
        bar.add(strokeMenu);

        //Help menu
        JMenu helpMenu =new JMenu("Help");
        helpMenu.setMnemonic('H');

        //Set help menu item
        JMenuItem helpItem=new JMenuItem("About this Drawing Pad");
        helpItem.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                JOptionPane.showMessageDialog(null,"Drawing Pad for painter\n"
                                + "Version: Testing 1.0\n"
                                + "Copyright (c) 2017 XMU LXY",
                        "Drawing Pad program discriptionn",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        });
        helpMenu.add(helpItem);
        bar.add(helpMenu);

        items = new ImageIcon[names.length];

        //Create buttons for various basic graphics
        drawingArea = new DrawPanel();
        choices = new JButton[names.length];
        Container c=getContentPane();//wtf?
        super.setJMenuBar(bar);
        choices = new JButton[names.length];

        buttonPanel = new JToolBar(JToolBar.HORIZONTAL);
        //Import the graphics icons we need
        for (int i = 0; i < choices.length; i++) {
            items[i] = new ImageIcon(names[i] + ".jpg");
            choices[i] = new JButton("", items[i]);
            choices[i].setToolTipText(tipText[i]);
            buttonPanel.add(choices[i]);
        }

        ButtonHandler handler = new ButtonHandler();
        ButtonHandler1 handler1 = new ButtonHandler1();
        ButtonHandler2 handler2=new ButtonHandler2();
        //Add listeners to buttons
        for(int i=3;i<choices.length-6;i++){
            choices[i].addActionListener(handler);
        }

        choices[0].addActionListener(
                new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        newFile();
                    }
                });
        choices[1].addActionListener(
                new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        loadFile();
                    }
                });
        choices[2].addActionListener(
                new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        saveFile();
                    }
                });
        for(int i=1;i<=2;i++){
            choices[choices.length-i].addActionListener(handler1);
        }
        choices[choices.length-6].addActionListener(handler1);
        for(int i=5;i>=3;i--) {
            choices[choices.length - i].addActionListener(handler2);
        }
        //Font style selection
        styles = new JComboBox(styleNames);
        styles.setLightWeightPopupEnabled(false);
        styles.setMaximumRowCount(8);
        styles.addItemListener(new ItemListener(){

            public void itemStateChanged(ItemEvent e){
                style1=styleNames[styles.getSelectedIndex()];
                System.out.println(style1);
            }
        });

        //Select font
        bold =  new JCheckBox("BOLD");
        italics = new JCheckBox("ITALICS");

        checkBoxHandler cHandler = new checkBoxHandler();
        bold.addItemListener(cHandler);
        italics.addItemListener(cHandler);
        //JPanel wordPanel =new JPanel();//wtf? mess up
        buttonPanel.add(bold);
        buttonPanel.add(italics);
        buttonPanel.add(styles);
        styles.setMaximumSize(new Dimension(100,20));
        styles.setMinimumSize(new Dimension(50,20));

        c.add(buttonPanel, BorderLayout.NORTH);
        c.add(drawingArea,BorderLayout.CENTER);

        statusBar = new JLabel();
        c.add(statusBar,BorderLayout.SOUTH);
        setSize(width,height);
        newFile();
        setVisible(true);
    }

    //Create a new block for a new basic unit graphic
    void createNewItem(){
//        if (currentChoice == 14)//Set cursor
//        {
//            drawingArea.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));
//        } else {
//            drawingArea.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
//        }
        switch (currentChoice) {
            case 3:
                itemList[index] = new Pencil();
                break;
            case 4:
                itemList[index] = new Line();
                break;
            case 5:
                itemList[index] = new Rect();
                break;
            case 6:
                itemList[index] = new FillRect();
                break;
            case 7:
                itemList[index] = new Oval();
                break;
            case 8:
                itemList[index] = new FillOval();
                break;
            case 9:
                itemList[index] = new Circle();
                break;
            case 10:
                itemList[index] = new FillCircle();
                break;
            case 11:
                itemList[index] = new RoundRect();
                break;
            case 12:
                itemList[index] = new FillRoundRect();
                break;
            case 13:
                itemList[index] = new Rubber();
                break;
            case 14:
                itemList[index] = new Words();
                break;
        }
        itemList[index].type = currentChoice;
        itemList[index].R = R;
        itemList[index].G = G;
        itemList[index].B = B;
        if(gradient!=0){
            itemList[index].gradient=gradient;
            itemList[index].gradientDistance=gradientDistance;
            itemList[index].R0 = R0;
            itemList[index].G0 = G0;
            itemList[index].B0 = B0;
        }
        else{
            itemList[index].gradient=0;
        }
        itemList[index].stroke = stroke;
    }

    public void chooseColor() {
        gradient=0;
        color = JColorChooser.showDialog(this,
                "Choose a color", color);
        R=color.getRed();
        G= color.getGreen();
        B= color.getBlue();
    }

    public void chooseGradientColor() {
        gradient=1;
        color = JColorChooser.showDialog(this,
                "Choose a color", color);
        R=color.getRed();
        G= color.getGreen();
        B= color.getBlue();
        color = JColorChooser.showDialog(this,
                "Choose a color", color);
        String input;
        input = JOptionPane.showInputDialog("" +
                "Please input a float distance value!");
        gradientDistance=Float.parseFloat(input);
        R0=color.getRed();
        G0= color.getGreen();
        B0= color.getBlue();
    }

    public void setStroke() {
        String input;
        input = JOptionPane.showInputDialog(
                "Please input a float stroke value! ( >0 )");
        stroke = Float.parseFloat(input);
       // itemList[index+1].stroke = stroke;
    }

    private class checkBoxHandler implements ItemListener {
        public void itemStateChanged(ItemEvent e) {
            if (e.getSource() == bold) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    f1 = Font.BOLD;
                } else {
                    f1 = Font.PLAIN;
                }
            }
            if (e.getSource() == italics) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    f2 = Font.ITALIC;
                } else {
                    f2 = Font.PLAIN;
                }
            }
        }
    }

    public void saveFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.CANCEL_OPTION) {
            return;
        }
        File fileName = fileChooser.getSelectedFile();
        fileName.canWrite();
        if (fileName == null || fileName.getName().equals("")) {
            JOptionPane.showMessageDialog(fileChooser, "Invalid File Name",
                    "Invalid File Name", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                fileName.delete();
                FileOutputStream fos = new FileOutputStream(fileName);
                output = new ObjectOutputStream(fos);
                Drawing record;
                output.writeInt(index);
                for (int i = 0; i < index; i++) {
                    record = itemList[i];
                    output.writeObject(record);
                    output.flush();
                }
                output.close();
                fos.close();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }

    public void loadFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.CANCEL_OPTION) {
            return;
        }
        File fileName = fileChooser.getSelectedFile();
        fileName.canRead();
        if (fileName == null || fileName.getName().equals("")) {
            JOptionPane.showMessageDialog(fileChooser, "Invalid File Name",
                    "Invalid File Name", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                FileInputStream fis = new FileInputStream(fileName);
                input = new ObjectInputStream(fis);
                Drawing inputRecord;
                int countNumber = 0;
                countNumber = input.readInt();
                for (index = 0; index < countNumber; index++) {
                    inputRecord = (Drawing) input.readObject();
                    itemList[index] = inputRecord;
                }
                //createNewItem();
                input.close();
                repaint();
            } catch (EOFException endofFileException) {
                JOptionPane.showMessageDialog(this, "no more record in file",
                        "class not found", JOptionPane.ERROR_MESSAGE);
            } catch (ClassNotFoundException classNotFoundException) {
                JOptionPane.showMessageDialog(this, "Unable to Create Object",
                        "end of file", JOptionPane.ERROR_MESSAGE);
            } catch (IOException ioException) {
                JOptionPane.showMessageDialog(this, "error during read from file",
                        "read Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }

    public void newFile() {
        index = 0;
        color = Color.black;
        stroke = 1.0f;
        style1=styleNames[styles.getSelectedIndex()];
        f1= Font.PLAIN;
        f2=Font.PLAIN;
        createNewItem();
        repaint();
    }
    public void unDo(Drawing i[]){
        System.out.println(index);
        if(i[index].type!=3&&i[index].type!=13&&index>=1)index--;
        else if(i[index].type==3||i[index].type==13) {
            while (index != 0 && (i[index].type == 3 || i[index].type == 13))
                index--;
        }
        repaint();
        System.out.println(index);
    }

    public void reDo(Drawing i[]){
        System.out.println(index);
        if(i[index+1].type!=3&&i[index+1].type!=13&&i[index+1]!=null)index++;
        else if(i[index+1].type==3||i[index+1].type==13) {
            while (i[index+1]!=null && (i[index+1].type == 3 || i[index+1].type == 13))
                index++;
        }
        repaint();
        System.out.println(index);
    }

    //Class ButtonHandler, Inner Class, used to listen basic buttons' operation
    public class ButtonHandler implements ActionListener{

        public void actionPerformed(ActionEvent e){
            for(int j=3;j<choices.length-6;j++){
                if(e.getSource()==choices[j]){
                    currentChoice=j;
                    if(j==3) {//Set custom cursor style
                        String url = "Pencil.jpg";
                        Toolkit tk = Toolkit.getDefaultToolkit();
                        Image image = new ImageIcon(url).getImage();
                        Cursor cursor = tk.createCustomCursor(image, new Point(10, 10), "norm");
                        drawingArea.setCursor(cursor);
                    }
                    else if(j==13){
                        String url = "Rubber.jpg";
                        Toolkit tk = Toolkit.getDefaultToolkit();
                        Image image = new ImageIcon(url).getImage();
                        Cursor cursor = tk.createCustomCursor(image, new Point(10, 10), "norm");
                        drawingArea.setCursor(cursor);
                    }
                    else
                        drawingArea.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
                }
            }
        }
    }

    //Class ButtonHandler1,Inner Class, used to listen color selection, setting stroke, operation of word button
    public class ButtonHandler1 implements ActionListener{

        public void actionPerformed(ActionEvent e){
            if(e.getSource()==choices[choices.length-6]){
                chooseColor();
            }
            if(e.getSource()==choices[choices.length-2]){
                setStroke();
            }
            if(e.getSource()==choices[choices.length-1]){
                drawingArea.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));
                JOptionPane.showMessageDialog(null, "Please hit the draw pad to choose word postion","Hint",JOptionPane.INFORMATION_MESSAGE);
                String input;
                st=JOptionPane.showInputDialog("Please input the text you want\n"+
                "and then hit the pad to choose where to show it");
                currentChoice=14;
//                createNewItem();
//                itemList[index].s1=input;
//                itemList[index].x1=f1;
//                itemList[index].y1=f2;
//                itemList[index].s2=style1;
                //repaint();
            }
        }
    }
    //Class ButtonHandler1,Inner Class, used to listen setting gradient styles of color buttons
    public class ButtonHandler2 implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            if(e.getSource()==choices[choices.length-5])gradient=1;
            else if(e.getSource()==choices[choices.length-4])gradient=2;
            else if(e.getSource()==choices[choices.length-3])gradient=3;
        }
    }
    //Mouse Event mouseA class, inherited from MouseAdapter, used to complete mouse related Event
    class MouseA extends MouseAdapter{

        public void mousePressed(MouseEvent e){
            index++;
            statusBar.setText("	Mouse Pressed at ["+e.getX()+","+e.getY()+"]");
            createNewItem();
            itemList[index].x1=e.getX();
            itemList[index].y1=e.getY();
            if(currentChoice==14){
                itemList[index].x1=f1;
                itemList[index].y1=f2;
                itemList[index].s1=st;
                itemList[index].s2=style1;
                System.out.println(index);
            }

            //if the current graphic is pencil or rubber, do the flowing operations
            if(currentChoice==3||currentChoice==13){
                //flag=true;
                start=index;
                itemList[index].x2=e.getX();
                itemList[index++].y2=e.getY();
                createNewItem();
            }
        }

        public void mouseReleased(MouseEvent e){//not very understand......
            statusBar.setText("	Mouse Released at ["+e.getX()+","+e.getY()+"]");
            if (currentChoice == 3 || currentChoice == 13) {
                Drawing[] temp=new Drawing[5000+index-start];
                for(int i=0;i<=index;i++){
                    temp[i]=itemList[i];
                }
                itemList=temp;
                itemList[index].x1 = e.getX();
                itemList[index].y1 = e.getY();
            }
            System.out.println(index);
            itemList[index].x2 = e.getX();
            itemList[index].y2 = e.getY();
            repaint();
            //If draw a basic graphics item after undo, delete those undone graphics
            int temp=index+1;
            while(itemList[temp]!=null){
                itemList[temp]=null;
                temp++;
            }
            //index++;
            //createNewItem();//waiting to improve useless
        }

        public void mouseEntered(MouseEvent e) {
            statusBar.setText("     Mouse Entered @:[" + e.getX() +
                    ", " + e.getY() + "]");
        }

        public void mouseExited(MouseEvent e) {
            statusBar.setText("     Mouse Exited @:[" + e.getX() +
                    ", " + e.getY() + "]");
        }
    }

    //Mouse Event mouseB class, inherited from MouseMostionAdapter, used to complete mouse movement Event
    class MouseB extends MouseMotionAdapter{
        public void mouseDragged(MouseEvent e){
            statusBar.setText("     Mouse Dragged @:[" + e.getX() +
                    ", " + e.getY() + "]");
            if (currentChoice == 3 || currentChoice == 13) {
                itemList[index - 1].x1 = itemList[index].x2 = itemList[index].x1 = e.getX();
                itemList[index - 1].y1 = itemList[index].y2 = itemList[index].y1 = e.getY();
                index++;
                createNewItem();
            } else {
                itemList[index].x2 = e.getX();
                itemList[index].y2 = e.getY();
            }
            repaint();
        }
        public void mouseMoved(MouseEvent e) {
            statusBar.setText("     Mouse Moved @:[" + e.getX() +
                    ", " + e.getY() + "]");
        }
    }
    class DrawPanel extends JPanel {
        public DrawPanel() {
            setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
            setBackground(Color.white);
            addMouseListener(new MouseA());
            addMouseMotionListener(new MouseB());
        }

        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g;    //Define the brush
            int j = 0;
            while (j <= index) {
                draw(g2d, itemList[j]);
                j++;
            }
        }

        void draw(Graphics2D g2d, Drawing i) {
            i.draw(g2d);//Pass the brush to each sub class to complete the drawing
        }
    }

}


class Drawing implements Serializable{//Parent class,basic graphics unit,using serial interface,
    //used when saved
    int x1,x2,y1,y2;//Define coordinate properties
    int gradient;//Whether to use gradient color, or gradient style
    int R,G,B;//Define color attribute
    int R0,G0,B0;//The second color for gradient color
    float gradientDistance;//The distance of gradient
    float stroke;//Define the line thickness attribute
    int type;//Define the font attribute
    String s1;
    String s2;//Define the font style attribute

    void draw(Graphics2D g2d){
        if(gradient==3) {
            GradientPaint paint = new GradientPaint(0, 0, new Color(R, G, B), gradientDistance, gradientDistance,
                    new Color(R0, G0, B0),true);
            g2d.setPaint(paint);
        }else if(gradient==2){
            GradientPaint paint = new GradientPaint(0, 0, new Color(R, G, B), gradientDistance, 0,
                    new Color(R0, G0, B0),true);
            g2d.setPaint(paint);
        }else if(gradient==1){
            GradientPaint paint = new GradientPaint(0, 0, new Color(R, G, B), 0, gradientDistance,
                    new Color(R0, G0, B0),true);
            g2d.setPaint(paint);
        }
        else
            g2d.setPaint(new Color(R,G,B));
    }
    //Define a drawing function
}

class Line extends Drawing{
    void draw(Graphics2D g2d){
        super.draw(g2d);
        g2d.setStroke(new BasicStroke(stroke,
                BasicStroke.CAP_ROUND,BasicStroke.JOIN_BEVEL));
        g2d.drawLine(x1, y1, x2, y2);
    }
}

class Rect extends Drawing{
    void draw(Graphics2D g2d){
        super.draw(g2d);
        g2d.setStroke(new BasicStroke(stroke));
        g2d.drawRect(Math.min(x1,x2), Math.min(y1, y2), Math.abs(x1-x2), Math.abs(y1-y2));
    }
}

class FillRect extends Drawing{
    void draw(Graphics2D g2d){
        super.draw(g2d);
        g2d.setStroke(new BasicStroke(stroke));
        g2d.fillRect(Math.min(x1,x2), Math.min(y1, y2), Math.abs(x1-x2), Math.abs(y1-y2));
    }
}

class Oval extends Drawing{
    void draw(Graphics2D g2d){
        super.draw(g2d);
        g2d.setStroke(new BasicStroke(stroke));
        g2d.drawOval(Math.min(x1,x2), Math.min(y1, y2), Math.abs(x1-x2), Math.abs(y1-y2));
    }
}

class FillOval extends Drawing{
    void draw(Graphics2D g2d){
        super.draw(g2d);
        g2d.setStroke(new BasicStroke(stroke));
        g2d.fillOval(Math.min(x1,x2), Math.min(y1, y2), Math.abs(x1-x2), Math.abs(y1-y2));
    }
}

class Circle extends Drawing{
    void draw(Graphics2D g2d){
        super.draw(g2d);
        g2d.setStroke(new BasicStroke(stroke));
        g2d.drawOval(Math.min(x1,x2), Math.min(y1, y2),
                Math.max(Math.abs(x1-x2), Math.abs(y1-y2)),
                Math.max(Math.abs(y1-y2),Math.abs(x1-x2)));
    }
}

class FillCircle extends Drawing{
    void draw(Graphics2D g2d){
        super.draw(g2d);
        g2d.setStroke(new BasicStroke(stroke));
        g2d.fillOval(Math.min(x1,x2), Math.min(y1, y2),
                Math.max(Math.abs(x1-x2), Math.abs(y1-y2)),
                Math.max(Math.abs(y1-y2),Math.abs(x1-x2)));
    }
}

class RoundRect extends Drawing{
    void draw(Graphics2D g2d) {
        super.draw(g2d);
        g2d.setStroke(new BasicStroke(stroke));
        g2d.drawRoundRect(Math.min(x1, x2), Math.min(y1, y2),
                Math.abs(x1 - x2), Math.abs(y1 - y2),
                50, 35);
    }
}

class FillRoundRect extends Drawing{
    void draw(Graphics2D g2d) {
        super.draw(g2d);
        g2d.setStroke(new BasicStroke(stroke));
        g2d.fillRoundRect(Math.min(x1, x2), Math.min(y1, y2),
                Math.abs(x1 - x2), Math.abs(y1 - y2),
                50, 35);
    }
}

class Pencil extends Drawing{
    void draw(Graphics2D g2d) {
        super.draw(g2d);
        g2d.setStroke(new BasicStroke(stroke,
                BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL));
        g2d.drawLine(x1, y1, x2, y2);
    }

}

class Rubber extends Drawing{
    void draw(Graphics2D g2d) {
        g2d.setPaint(new Color(255, 255, 255));
        g2d.setStroke(new BasicStroke(stroke + 4,
                BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL));
        g2d.drawLine(x1, y1, x2, y2);
    }
}

class Words extends Drawing{
    void draw(Graphics2D g2d){
        super.draw(g2d);
        g2d.setFont(new Font(s2,x1+y1,(int)stroke*18));
        if(s1!=null){
            System.out.println(s2);
            g2d.drawString(s1, x2, y2);
        }
    }

}
